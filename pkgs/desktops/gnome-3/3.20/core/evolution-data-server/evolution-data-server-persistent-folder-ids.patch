diff --git a/camel/camel-folder.c b/camel/camel-folder.c
index 4f62c7b..14adb91 100644
--- a/camel/camel-folder.c
+++ b/camel/camel-folder.c
@@ -69,6 +69,8 @@ struct _CamelFolderPrivate {
 	gchar *full_name;
 	gchar *display_name;
 	gchar *description;
+	// lazy value. Only sets, when something needs folder_id of the folder
+	guint64 folder_id;
 };
 
 struct _AsyncContext {
@@ -1313,6 +1315,7 @@ camel_folder_init (CamelFolder *folder)
 	folder->priv = CAMEL_FOLDER_GET_PRIVATE (folder);
 	folder->priv->frozen = 0;
 	folder->priv->changed_frozen = camel_folder_change_info_new ();
+	folder->priv->folder_id = 0;
 
 	g_rec_mutex_init (&folder->priv->lock);
 	g_mutex_init (&folder->priv->change_lock);
@@ -2276,6 +2279,10 @@ camel_folder_delete (CamelFolder *folder)
 	signal_closure = g_slice_new0 (SignalClosure);
 	g_weak_ref_init (&signal_closure->folder, folder);
 
+	camel_session_forget_folder_id (session,
+		camel_service_get_uid (service),
+		camel_folder_get_full_name (folder));
+
 	/* Prioritize ahead of GTK+ redraws. */
 	camel_session_idle_add (
 		session, G_PRIORITY_HIGH_IDLE,
@@ -2330,6 +2337,11 @@ camel_folder_rename (CamelFolder *folder,
 	g_weak_ref_init (&signal_closure->folder, folder);
 	signal_closure->folder_name = old_name;  /* transfer ownership */
 
+	camel_session_move_folder_id (session,
+		camel_service_get_uid (service),
+		old_name,
+		new_name);
+
 	/* Prioritize ahead of GTK+ redraws. */
 	camel_session_idle_add (
 		session, G_PRIORITY_HIGH_IDLE,
@@ -4108,6 +4120,27 @@ camel_folder_transfer_messages_to_finish (CamelFolder *source,
 	return g_task_propagate_boolean (G_TASK (result), error);
 }
 
+guint64
+camel_folder_get_folder_id (CamelFolder *folder)
+{
+	g_return_val_if_fail (CAMEL_IS_FOLDER (folder), 0);
+
+	if (folder->priv->folder_id == 0) {
+		CamelService *store =
+			CAMEL_SERVICE (camel_folder_get_parent_store (folder));
+		CamelSession *session = camel_service_ref_session (store);
+
+		folder->priv->folder_id = camel_session_generate_folder_id (session,
+			camel_service_get_uid (store),
+			camel_folder_get_full_name (folder));
+
+		g_object_unref (session);
+	}
+
+	return folder->priv->folder_id;
+}
+
+
 /**
  * camel_folder_change_info_new:
  *
diff --git a/camel/camel-folder.h b/camel/camel-folder.h
index 06843bc..b5bfb80 100644
--- a/camel/camel-folder.h
+++ b/camel/camel-folder.h
@@ -530,6 +530,8 @@ gboolean	camel_folder_transfer_messages_to_finish
 						 GPtrArray **transferred_uids,
 						 GError **error);
 
+guint64		camel_folder_get_folder_id	(CamelFolder *folder);
+
 /* update functions for change info */
 CamelFolderChangeInfo *
 		camel_folder_change_info_new	(void);
diff --git a/camel/camel-session.c b/camel/camel-session.c
index b59a39f..1afd498 100644
--- a/camel/camel-session.c
+++ b/camel/camel-session.c
@@ -70,7 +70,13 @@ struct _CamelSessionPrivate {
 
 	GMainContext *main_context;
 
+	guint64 next_folder_id;
+	GKeyFile *folder_ids_key_file;
+	GMutex folder_ids_lock;
+
 	guint online : 1;
+	gboolean persistent_folder_ids : 1;
+
 };
 
 struct _AsyncContext {
@@ -104,7 +110,8 @@ enum {
 	PROP_MAIN_CONTEXT,
 	PROP_ONLINE,
 	PROP_USER_DATA_DIR,
-	PROP_USER_CACHE_DIR
+	PROP_USER_CACHE_DIR,
+	PROP_PERSISTENT_FOLDER_IDS,
 };
 
 enum {
@@ -272,6 +279,15 @@ session_set_user_cache_dir (CamelSession *session,
 }
 
 static void
+session_set_persistent_folder_ids (CamelSession *session, gboolean value)
+{
+	// only allow change property before any id gets generated
+	g_return_if_fail (session->priv->next_folder_id == 1);
+
+	session->priv->persistent_folder_ids = value;
+}
+
+static void
 session_set_property (GObject *object,
                       guint property_id,
                       const GValue *value,
@@ -301,6 +317,11 @@ session_set_property (GObject *object,
 				CAMEL_SESSION (object),
 				g_value_get_string (value));
 			return;
+		case PROP_PERSISTENT_FOLDER_IDS:
+			session_set_persistent_folder_ids (
+				CAMEL_SESSION (object),
+				g_value_get_boolean (value));
+			return;
 	}
 
 	G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
@@ -342,6 +363,12 @@ session_get_property (GObject *object,
 				value, camel_session_get_user_cache_dir (
 				CAMEL_SESSION (object)));
 			return;
+
+		case PROP_PERSISTENT_FOLDER_IDS:
+			g_value_set_boolean (
+				value, camel_session_get_persistent_folder_ids (
+				CAMEL_SESSION (object)));
+			return;
 	}
 
 	G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
@@ -387,6 +414,11 @@ session_finalize (GObject *object)
 		g_hash_table_destroy (priv->junk_headers);
 	}
 
+	if (priv->folder_ids_key_file != NULL)
+		g_key_file_free (priv->folder_ids_key_file);
+
+	g_mutex_clear (&priv->folder_ids_lock);
+
 	/* Chain up to parent's finalize() method. */
 	G_OBJECT_CLASS (camel_session_parent_class)->finalize (object);
 }
@@ -663,6 +695,18 @@ camel_session_class_init (CamelSessionClass *class)
 			G_PARAM_CONSTRUCT |
 			G_PARAM_STATIC_STRINGS));
 
+	g_object_class_install_property (
+		object_class,
+		PROP_PERSISTENT_FOLDER_IDS,
+		g_param_spec_boolean (
+			"persistent-folder-ids",
+			"Persistent Folder Ids",
+			"Keep folder ids persistent between app runs",
+			NULL,
+			G_PARAM_CONSTRUCT_ONLY |
+			G_PARAM_READWRITE |
+			G_PARAM_STATIC_STRINGS));
+
 	signals[JOB_STARTED] = g_signal_new (
 		"job-started",
 		G_OBJECT_CLASS_TYPE (class),
@@ -723,6 +767,10 @@ camel_session_init (CamelSession *session)
 	session->priv->junk_headers = NULL;
 
 	session->priv->main_context = g_main_context_ref_thread_default ();
+
+	session->priv->next_folder_id = 1;
+	session->priv->persistent_folder_ids = FALSE;
+	g_mutex_init (&session->priv->folder_ids_lock);
 }
 
 /**
@@ -1810,3 +1858,289 @@ camel_session_forward_to_finish (CamelSession *session,
 	return g_task_propagate_boolean (G_TASK (result), error);
 }
 
+#define PERSITENT_FOLDER_IDS_FILE "persistent-folder-ids.ini"
+
+static void
+load_folder_ids (CamelSession *session)
+{
+	GKeyFile *key_file;
+	gchar* filename;
+	GError* gerror = NULL;
+
+	if (session->priv->folder_ids_key_file != NULL)
+		return;
+
+	session->priv->folder_ids_key_file = g_key_file_new ();
+
+	if (session->priv->user_cache_dir == NULL)
+		return;
+
+	key_file = session->priv->folder_ids_key_file;
+	filename = g_build_filename (session->priv->user_cache_dir,
+		PERSITENT_FOLDER_IDS_FILE,
+		NULL);
+
+	if (g_key_file_load_from_file (key_file, filename, 0, &gerror)) {
+		// searching for max id in already generated ids
+		gsize groups_count;
+		gchar** groups = g_key_file_get_groups (key_file, &groups_count);
+
+		if (groups != NULL) {
+			for (gsize gi = 0; gi < groups_count; ++gi) {
+				gsize keys_count;
+				guint64 id;
+				gchar** keys;
+
+				keys = g_key_file_get_keys (key_file,
+					groups[gi],
+					&keys_count,
+					&gerror);
+				if (gerror != NULL) {
+					g_warning ("%s", gerror->message);
+					g_error_free (gerror);
+					gerror = NULL;
+				}
+				if (keys == NULL)
+					continue;
+
+				for (gsize ki = 0; ki < keys_count; ++ki) {
+					id = g_key_file_get_int64 (key_file,
+						groups[gi],
+						keys[ki],
+						&gerror);
+					if (gerror == NULL) {
+						session->priv->next_folder_id =
+							MAX (session->priv->next_folder_id, id + 1);
+					} else {
+						g_warning ("%s", gerror->message);
+						g_error_free (gerror);
+						gerror = NULL;
+					}
+				}
+
+				g_strfreev (keys);
+			}
+			g_strfreev (groups);
+		}
+	} else if (gerror != NULL) {
+		if (!g_error_matches (gerror, G_FILE_ERROR, G_FILE_ERROR_NOENT))
+			g_warning ("%s", gerror->message);
+		g_error_free (gerror);
+	}
+
+	g_free (filename);
+}
+
+static void
+save_folder_ids (CamelSession *session)
+{
+	GKeyFile *key_file;
+	gchar* filename;
+	GError* gerror = NULL;
+
+	if (session->priv->folder_ids_key_file == NULL)
+		return;
+
+	if (session->priv->user_cache_dir == NULL)
+		return;
+
+	key_file = session->priv->folder_ids_key_file;
+	filename = g_build_filename (session->priv->user_cache_dir,
+		PERSITENT_FOLDER_IDS_FILE,
+		NULL);
+	g_key_file_save_to_file (key_file, filename, &gerror);
+	if (gerror != NULL) {
+		g_warning ("%s", gerror->message);
+		g_error_free (gerror);
+	}
+
+	g_free (filename);
+}
+
+static gboolean
+is_not_found_error (GError* gerror) {
+	return
+		g_error_matches (gerror,
+			G_KEY_FILE_ERROR,
+			G_KEY_FILE_ERROR_KEY_NOT_FOUND) ||
+		g_error_matches (gerror,
+			G_KEY_FILE_ERROR,
+			G_KEY_FILE_ERROR_GROUP_NOT_FOUND);
+}
+
+gboolean
+camel_session_get_persistent_folder_ids	(CamelSession *session)
+{
+	g_return_val_if_fail (CAMEL_IS_SESSION (session), FALSE);
+
+	return session->priv->persistent_folder_ids;
+}
+
+guint64
+camel_session_generate_folder_id (CamelSession *session,
+                                  const gchar *service_uid,
+                                  const gchar *folder_name)
+{
+	guint64 id;
+
+	g_return_val_if_fail (CAMEL_IS_SESSION (session), 0);
+	g_return_val_if_fail (service_uid != NULL, 0);
+	g_return_val_if_fail (folder_name != NULL, 0);
+
+	g_mutex_lock (&session->priv->folder_ids_lock);
+
+	if (session->priv->persistent_folder_ids) {
+		GKeyFile *key_file;
+		GError* gerror = NULL;
+		gchar* e_service_uid;
+		gchar* e_folder_name;
+
+		load_folder_ids (session);
+		key_file = session->priv->folder_ids_key_file;
+
+		e_service_uid = camel_url_encode (service_uid, NULL);
+		e_folder_name = camel_url_encode (folder_name, NULL);
+
+		id = g_key_file_get_int64 (key_file,
+			e_service_uid, e_folder_name, &gerror);
+		if (gerror != NULL) {
+			if (!is_not_found_error (gerror)) {
+				g_warning ("%s", gerror->message);
+			}
+			g_error_free (gerror);
+			gerror = NULL;
+
+			id = session->priv->next_folder_id++;
+			g_key_file_set_int64 (key_file, e_service_uid, e_folder_name, id);
+			save_folder_ids (session);
+		}
+
+		g_free (e_folder_name);
+		g_free (e_service_uid);
+
+
+	} else {
+		id = session->priv->next_folder_id++;
+	}
+
+	g_mutex_unlock (&session->priv->folder_ids_lock);
+
+	return id;
+}
+
+void
+camel_session_forget_folder_id (CamelSession *session,
+                                const gchar *service_uid,
+                                const gchar *folder_name)
+{
+	g_return_if_fail (CAMEL_IS_SESSION (session));
+	g_return_if_fail (service_uid != NULL);
+	g_return_if_fail (folder_name != NULL);
+
+	g_mutex_lock (&session->priv->folder_ids_lock);
+
+	if (session->priv->persistent_folder_ids) {
+		GKeyFile *key_file;
+		GError* gerror = NULL;
+		gchar* e_service_uid;
+		gchar* e_folder_name;
+
+		load_folder_ids (session);
+		key_file = session->priv->folder_ids_key_file;
+
+		e_service_uid = camel_url_encode (service_uid, NULL);
+		e_folder_name = camel_url_encode (folder_name, NULL);
+
+		if (g_key_file_remove_key (key_file,
+			e_service_uid, e_folder_name, &gerror)) {
+
+			save_folder_ids (session);
+		} else if (gerror != NULL) {
+			if (!is_not_found_error (gerror)) {
+				g_warning ("%s", gerror->message);
+			}
+			g_error_free (gerror);
+			gerror = NULL;
+		}
+
+		g_free (e_folder_name);
+		g_free (e_service_uid);
+	}
+
+	g_mutex_unlock (&session->priv->folder_ids_lock);
+}
+
+void
+camel_session_move_folder_id (CamelSession *session,
+                              const gchar *service_uid,
+                              const gchar *old_folder_name,
+                              const gchar *new_folder_name)
+{
+	g_return_if_fail (CAMEL_IS_SESSION (session));
+	g_return_if_fail (service_uid != NULL);
+	g_return_if_fail (old_folder_name != NULL);
+	g_return_if_fail (new_folder_name != NULL);
+
+	g_mutex_lock (&session->priv->folder_ids_lock);
+
+	if (session->priv->persistent_folder_ids) {
+		GKeyFile *key_file;
+		GError* gerror = NULL;
+		gchar* e_service_uid;
+		gchar* e_old_folder_name;
+		gchar* e_new_folder_name;
+		guint64 orig_id;
+		gboolean dirty = FALSE;
+		gboolean remove_old_key = FALSE;
+
+		load_folder_ids (session);
+		key_file = session->priv->folder_ids_key_file;
+
+		e_service_uid = camel_url_encode (service_uid, NULL);
+		e_old_folder_name = camel_url_encode (old_folder_name, NULL);
+		e_new_folder_name = camel_url_encode (new_folder_name, NULL);
+
+		orig_id = g_key_file_get_int64 (key_file,
+			e_service_uid, e_old_folder_name, &gerror);
+
+		if (gerror == NULL) {
+			remove_old_key = TRUE;
+		} else {
+			if (!is_not_found_error (gerror)) {
+				g_warning ("%s", gerror->message);
+				remove_old_key = TRUE;
+			}
+			g_error_free (gerror);
+			gerror = NULL;
+		}
+
+		if (remove_old_key) {
+			g_key_file_remove_key (key_file,
+				e_service_uid, e_old_folder_name, &gerror);
+			if (gerror == NULL) {
+				dirty = TRUE;
+			} else {
+				g_warning ("%s", gerror->message);
+				g_error_free (gerror);
+				gerror = NULL;
+			}
+		}
+
+		if (orig_id != 0) {
+			g_key_file_set_int64 (key_file,
+				e_service_uid, e_new_folder_name, orig_id);
+			dirty = TRUE;
+		}
+
+		if (dirty) {
+			save_folder_ids (session);
+		}
+
+		g_free (e_new_folder_name);
+		g_free (e_old_folder_name);
+		g_free (e_service_uid);
+	}
+
+	g_mutex_unlock (&session->priv->folder_ids_lock);
+
+}
diff --git a/camel/camel-session.h b/camel/camel-session.h
index ce9b045..45b3726 100644
--- a/camel/camel-session.h
+++ b/camel/camel-session.h
@@ -248,6 +248,17 @@ void		camel_session_forward_to	(CamelSession *session,
 gboolean	camel_session_forward_to_finish	(CamelSession *session,
 						 GAsyncResult *result,
 						 GError **error);
+gboolean	camel_session_get_persistent_folder_ids	(CamelSession *session);
+guint64		camel_session_generate_folder_id	(CamelSession *session,
+						 const gchar *service_uid,
+						 const gchar *folder_name);
+void		camel_session_forget_folder_id	(CamelSession *session,
+						 const gchar *service_uid,
+						 const gchar *folder_name);
+void		camel_session_move_folder_id	(CamelSession *session,
+						 const gchar *service_uid,
+						 const gchar *old_folder_name,
+						 const gchar *new_folder_name);
 
 G_END_DECLS
 
diff --git a/camel/camel-vee-data-cache.c b/camel/camel-vee-data-cache.c
index 1eb67aa..147dbe2 100644
--- a/camel/camel-vee-data-cache.c
+++ b/camel/camel-vee-data-cache.c
@@ -95,7 +95,7 @@ vee_subfolder_data_hash_folder (CamelFolder *folder,
 	guint8 *digest;
 	gsize length;
 	gint state = 0, save = 0;
-	gchar *ptr_string;
+	guint64 id;
 	const gchar *uid;
 	gint i;
 
@@ -107,9 +107,8 @@ vee_subfolder_data_hash_folder (CamelFolder *folder,
 	uid = camel_service_get_uid (CAMEL_SERVICE (parent_store));
 	g_checksum_update (checksum, (guchar *) uid, -1);
 
-	ptr_string = g_strdup_printf ("%p", folder);
-	g_checksum_update (checksum, (guchar *) ptr_string, -1);
-	g_free (ptr_string);
+	id = camel_folder_get_folder_id (folder);
+	g_checksum_update (checksum, (guchar *) &id, sizeof (id));
 
 	g_checksum_get_digest (checksum, digest, &length);
 	g_checksum_free (checksum);
